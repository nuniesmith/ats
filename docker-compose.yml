services:
  # ATS Dedicated Game Server
  ats-server:
    build:
      context: .
      dockerfile: Dockerfile.ats-server
    image: ${ATS_SERVER_IMAGE:-nuniesmith/ats:server-latest}
    container_name: ats-dedicated-server
    ports:
      - "27015:27015/tcp"  # ATS multiplayer port
      - "27015:27015/udp"  # ATS multiplayer port UDP
    volumes:
      - ats-server-data:/app/data
      - ats-server-logs:/app/logs
      - ats-server-config:/app/config
      - ./config/server_config.sii:/app/config/server_config.sii:ro
      - ./config/server_packages.sii:/app/config/server_packages.sii:ro
      - ./config/server_packages.dat:/app/config/server_packages.dat:ro
    environment:
      - TZ=${TZ:-America/Toronto}
      - ATS_SERVER_NAME=${ATS_SERVER_NAME:-ATS Dedicated Server}
      - ATS_SERVER_PASSWORD=${ATS_SERVER_PASSWORD:-ruby}
      - ATS_MAX_PLAYERS=${ATS_MAX_PLAYERS:-8}
      - ATS_MAP=${ATS_MAP:-/home/profiles/multiplayer}
      - ATS_WELCOME_MESSAGE=${ATS_WELCOME_MESSAGE:-Welcome to our ATS server!}
      - STEAM_COLLECTION_ID=${STEAM_COLLECTION_ID:-3530633316}
      - ATS_LOGON_TOKEN=${ATS_LOGON_TOKEN:-}
      - ATS_SERVER_LOGON_TOKEN=${ATS_SERVER_LOGON_TOKEN:-}
      - ATS_SERVER_PORT=27015
      - ATS_QUERY_PORT=27016
      - ATS_ENABLE_PVP=${ATS_ENABLE_PVP:-false}
      - ATS_SPEED_LIMITER=${ATS_SPEED_LIMITER:-true}
      - ATS_FUEL_CONSUMPTION=${ATS_FUEL_CONSUMPTION:-1.0}
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "netstat", "-an", "|", "grep", ":27015"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    depends_on:
      - redis

  # React Web Application
  ats-web:
    image: ${WEB_IMAGE:-nuniesmith/ats:web-latest}
    build:
      context: ./src/web
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost/api}
        - VITE_SOCKET_URL=${VITE_SOCKET_URL:-http://localhost}
    container_name: ats-web-app
    expose:
      - "80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-America/Toronto}
      - VITE_API_URL=${VITE_API_URL:-http://localhost/api}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL:-http://localhost}
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - ats-api

  # Node.js API Server
  ats-api:
    image: ${API_IMAGE:-nuniesmith/ats:api-latest}
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: ats-api-server
    expose:
      - "3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-America/Toronto}
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-this}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - ATS_SERVER_PATH=/app/ats-server
      - ATS_DEDICATED_SERVER_HOST=ats-server
      - ATS_DEDICATED_SERVER_PORT=27015
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN:-}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID:-}
      - DOMAIN_NAME=${DOMAIN_NAME:-ats.7gram.xyz}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
      - ATS_DEFAULT_PASSWORD=${ATS_DEFAULT_PASSWORD:-ruby}
      - STEAM_COLLECTION_ID=${STEAM_COLLECTION_ID:-3530633316}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ats-data:/app/data
      - ats-logs:/app/logs
      - ats-config:/app/config
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      ats-server:
        condition: service_started

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: ats-redis
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    environment:
      - TZ=${TZ:-America/Toronto}
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --save 900 1 --save 300 10 --save 60 10000

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: ats-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/opt/ats/ssl:ro
      - /var/www/certbot:/var/www/certbot:ro
      - nginx-logs:/var/log/nginx
      # Include nginx main config if exists
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - TZ=${TZ:-America/Toronto}
      - DOMAIN_NAME=${DOMAIN_NAME:-ats.7gram.xyz}
    networks:
      - ats-network
    restart: unless-stopped
    depends_on:
      - ats-web
      - ats-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Netdata monitoring
  netdata:
    image: netdata/netdata:edge
    container_name: ats-netdata
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /run/dbus:/run/dbus:ro
    environment:
      - TZ=${TZ:-America/Toronto}
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN:-}
      - NETDATA_CLAIM_URL=${NETDATA_CLAIM_URL:-https://app.netdata.cloud}
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS:-}

# Networks
networks:
  ats-network:
    driver: bridge
    name: ats-network

# Persistent volumes
volumes:
  ats-server-data:
    name: ats-server-data
    driver: local
  ats-server-logs:
    name: ats-server-logs
    driver: local
  ats-server-config:
    name: ats-server-config
    driver: local
  ats-data:
    name: ats-data
    driver: local
  ats-logs:
    name: ats-logs
    driver: local
  ats-config:
    name: ats-config
    driver: local
  redis-data:
    name: ats-redis-data
    driver: local
  nginx-logs:
    name: ats-nginx-logs
    driver: local
  netdata-config:
    name: ats-netdata-config
    driver: local
  netdata-lib:
    name: ats-netdata-lib
    driver: local
  netdata-cache:
    name: ats-netdata-cache
    driver: local
