# Production Docker Compose with DockerHub Images
# ================================================
services:
  # React Web Application
  ats-web:
    image: ${WEB_IMAGE:-nuniesmith/ats:web-latest}
    # Fallback to local build if image not available
    build:
      context: ./src/web
      dockerfile: Dockerfile
    container_name: ats-web-app
    expose:
      - "80"
    environment:
      - NODE_ENV=production
      - TZ=${TZ:-America/Toronto}
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js API Server
  ats-api:
    image: ${API_IMAGE:-nuniesmith/ats:api-latest}
    # Fallback to local build if image not available
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: ats-api-server
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - TZ=${TZ:-America/Toronto}
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-this}
      - FRONTEND_URL=http://localhost
      - ATS_SERVER_PATH=/app/ats-server
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - DOMAIN_NAME=${DOMAIN_NAME:-ats.7gram.xyz}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - ATS_DEFAULT_PASSWORD=${ATS_DEFAULT_PASSWORD:-ruby}
      - STEAM_COLLECTION_ID=${STEAM_COLLECTION_ID:-3530633316}
    volumes:
      - ats-data:/app/data
      - ats-logs:/app/logs
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - redis

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: ats-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: ats-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
      # Mount SSL certificates if they exist (conditional)
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/ssl/ats:/etc/ssl/ats:ro
    environment:
      - TZ=${TZ:-America/Toronto}
    networks:
      - ats-network
    restart: unless-stopped
    depends_on:
      - ats-web
      - ats-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Networks
networks:
  ats-network:
    driver: bridge
    name: ats-network

# Persistent volumes
volumes:
  ats-data:
    name: ats-data
    driver: local
  ats-logs:
    name: ats-logs
    driver: local
  redis-data:
    name: ats-redis-data
    driver: local
  nginx-logs:
    name: ats-nginx-logs
    driver: local
