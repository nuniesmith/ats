name: 🚀 ATS Dedicated Server Deployment on Linode

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        type: choice
        options:
          - 'full-deploy'
          - 'test-only'
          - 'server-only'
        default: 'full-deploy'
      create_new_server:
        description: 'Create new Linode server'
        required: false
        type: boolean
        default: false

jobs:
  # ============================================================================
  # Stage 0: Pre-flight Checks & Validation
  # ============================================================================
  preflight-checks:
    name: 🛫 Pre-flight Checks
    runs-on: self-hosted
    outputs:
      deployment_mode: ${{ steps.config.outputs.deployment_mode }}
      should_create_server: ${{ steps.config.outputs.should_create_server }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: 🔍 Debug Runner Environment
        run: |
          echo "🔍 Debugging runner environment..."
          echo "Runner: ${{ runner.name }}"
          echo "OS: ${{ runner.os }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "PATH: $PATH"

      - name: 🧪 Simple Test Step
        run: |
          echo "Testing basic execution..."
          echo "This is a simple test"
          exit 0

      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Configure deployment
        id: config
        run: |
          echo "🎯 Configuring deployment..."
          DEPLOYMENT_MODE="${{ github.event.inputs.deployment_mode || 'full-deploy' }}"
          SHOULD_CREATE="${{ github.event.inputs.create_new_server || 'false' }}"
          
          echo "deployment_mode=$DEPLOYMENT_MODE" >> $GITHUB_OUTPUT
          echo "should_create_server=$SHOULD_CREATE" >> $GITHUB_OUTPUT
          
          echo "📋 Deployment Configuration:"
          echo "  - Mode: $DEPLOYMENT_MODE"
          echo "  - Create new server: $SHOULD_CREATE"

      - name: 🔐 Validate Required Secrets
        env:
          LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
          ATS_ROOT_PASSWORD: ${{ secrets.ATS_ROOT_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
        run: |
          echo "🔐 Validating required secrets..."
          
          MISSING_COUNT=0
          
          # Check each required secret
          if [ -z "$LINODE_TOKEN" ]; then
            echo "❌ Missing: LINODE_TOKEN - Linode API token for server provisioning"
            MISSING_COUNT=$((MISSING_COUNT + 1))
          else
            echo "✅ Found: LINODE_TOKEN"
          fi
          
          if [ -z "$ATS_ROOT_PASSWORD" ]; then
            echo "❌ Missing: ATS_ROOT_PASSWORD - Root password for ATS server"
            MISSING_COUNT=$((MISSING_COUNT + 1))
          else
            echo "✅ Found: ATS_ROOT_PASSWORD"
          fi
          
          if [ -z "$ACTIONS_USER_PASSWORD" ]; then
            echo "❌ Missing: ACTIONS_USER_PASSWORD - Password for actions user account"
            MISSING_COUNT=$((MISSING_COUNT + 1))
          else
            echo "✅ Found: ACTIONS_USER_PASSWORD"
          fi
          
          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "❌ Missing $MISSING_COUNT required secret(s)"
            echo "📋 To fix: Go to https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          echo ""
          echo "✅ All required secrets validated"

  # ============================================================================
  # Stage 1: Server Setup
  # ============================================================================
  setup-server:
    name: 🏗️ Setup Linode Server
    runs-on: self-hosted
    needs: [preflight-checks]
    if: needs.preflight-checks.outputs.deployment_mode != 'test-only'
    outputs:
      server_ip: ${{ steps.server-result.outputs.server_ip }}
      server_id: ${{ steps.server-result.outputs.server_id }}
      server_created: ${{ steps.server-result.outputs.server_created }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        run: |
          echo "🔧 Setting up environment..."
          
          # Ensure script is executable
          if [ -f "scripts/deployment/create-ats-server.sh" ]; then
            chmod +x scripts/deployment/create-ats-server.sh
          else
            echo "❌ Deployment script not found!"
            exit 1
          fi
          
          # Install required tools
          if ! command -v pip3 &>/dev/null; then
            if command -v pacman >/dev/null 2>&1; then
              sudo -n pacman -S --noconfirm python python-pip
            elif command -v apt-get >/dev/null 2>&1; then
              sudo -n apt-get update && sudo -n apt-get install -y python3 python3-pip
            fi
          fi
          
          # Install Linode CLI
          echo "📦 Installing Linode CLI..."
          pip3 install --user linode-cli --quiet
          export PATH="$HOME/.local/bin:$PATH"
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          
          # Configure Linode CLI to avoid interactive prompts
          echo "🔧 Configuring Linode CLI..."
          mkdir -p ~/.config/linode-cli
          echo "[DEFAULT]" > ~/.config/linode-cli/config
          echo "default-user = DEFAULT" >> ~/.config/linode-cli/config
          echo "region = ca-central" >> ~/.config/linode-cli/config
          echo "type = g6-standard-1" >> ~/.config/linode-cli/config
          echo "image = linode/ubuntu24.04" >> ~/.config/linode-cli/config
          echo "token = ${{ secrets.LINODE_TOKEN }}" >> ~/.config/linode-cli/config
          chmod 600 ~/.config/linode-cli/config
          
          echo "✅ Environment setup complete"

      - name: 🚀 Create/Detect Server
        id: create
        run: |
          echo "🚀 Running server creation/detection..."
          
          CREATE_FLAG=""
          if [ "${{ needs.preflight-checks.outputs.should_create_server }}" == "true" ]; then
            CREATE_FLAG="--force-new"
          fi
          
          # Run the server creation script
          ./scripts/deployment/create-ats-server.sh $CREATE_FLAG
          
          # Check if server details were generated
          if [ -f "server-details.env" ]; then
            source server-details.env
            echo "server_ip=${SERVER_IP:-}" >> $GITHUB_OUTPUT
            echo "server_id=${SERVER_ID:-unknown}" >> $GITHUB_OUTPUT
            echo "server_created=${IS_NEW_SERVER:-false}" >> $GITHUB_OUTPUT
            echo "✅ Server details captured"
          else
            echo "❌ Server details not found"
            exit 1
          fi
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_TOKEN }}
          ROOT_PASSWORD: ${{ secrets.ATS_ROOT_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}

      - name: 📊 Server Setup Results
        id: server-result
        if: always()
        run: |
          echo "server_ip=${{ steps.create.outputs.server_ip }}" >> $GITHUB_OUTPUT
          echo "server_id=${{ steps.create.outputs.server_id }}" >> $GITHUB_OUTPUT
          echo "server_created=${{ steps.create.outputs.server_created }}" >> $GITHUB_OUTPUT
          
          echo "📊 Server Setup Summary:"
          echo "  - Server IP: ${{ steps.create.outputs.server_ip }}"
          echo "  - Server ID: ${{ steps.create.outputs.server_id }}"
          echo "  - New Server: ${{ steps.create.outputs.server_created }}"

  setup-ats:
    name: Setup ATS Dedicated Server
    #runs-on: ubuntu-latest
    runs-on: self-hosted

    needs: setup-server
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: SSH and Install SteamCMD
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ needs.setup-server.outputs.server_ip }}
          username: root
          password: ${{ secrets.ATS_ROOT_PASSWORD }}
          script: |
            # Detect OS and install packages accordingly
            if command -v pacman >/dev/null 2>&1; then
              echo "Detected Arch Linux"
              # Update Arch Linux packages
              pacman -Syu --noconfirm
              # Install required packages including 32-bit libraries
              pacman -S --noconfirm base-devel git wget curl lib32-gcc-libs lib32-glibc
            elif command -v apt-get >/dev/null 2>&1; then
              echo "Detected Ubuntu/Debian"
              # Enable 32-bit architecture
              dpkg --add-architecture i386
              apt-get update
              # Install required packages
              apt-get install -y wget curl lib32gcc-s1 lib32stdc++6 libc6-i386 lib32z1
            else
              echo "Unsupported OS"
              exit 1
            fi
            
            # Create ATS server directory
            mkdir -p /home/ats-server
            cd /home/ats-server
            
            # Download and extract SteamCMD
            wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
            tar -xvzf steamcmd_linux.tar.gz
            
            # Make steamcmd executable
            chmod +x steamcmd.sh
            chmod +x linux32/steamcmd
            
            # Install ATS Dedicated Server
            ./steamcmd.sh +force_install_dir /home/ats-server +login anonymous +app_update 2239530 validate +quit

      - name: Deploy Configuration Files
        run: |
          # Make deployment script executable
          chmod +x scripts/deployment/deploy-ats-configs.sh
          
          # Deploy configuration files
          ./scripts/deployment/deploy-ats-configs.sh ${{ needs.setup-server.outputs.server_ip }}
        env:
          SSHPASS: ${{ secrets.ATS_ROOT_PASSWORD }}

      - name: Configure and Start Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ needs.setup-server.outputs.server_ip }}
          username: root
          password: ${{ secrets.ATS_ROOT_PASSWORD }}
          script: |
            # Configure firewall (if ufw is installed)
            if command -v ufw >/dev/null 2>&1; then
              ufw allow 27015:27020/tcp
              ufw allow 27015:27020/udp
            else
              # Use iptables directly on Arch
              iptables -A INPUT -p tcp --dport 27015:27020 -j ACCEPT
              iptables -A INPUT -p udp --dport 27015:27020 -j ACCEPT
              iptables-save > /etc/iptables/iptables.rules
              systemctl enable iptables
            fi
            
            # Create logs directory
            mkdir -p /home/ats-server/logs
            
            # Check if server_packages files exist
            if [ ! -f /home/ats-server/server_packages.dat ]; then
              echo "ERROR: server_packages.dat not found!"
              exit 1
            fi
            
            if [ ! -f /home/ats-server/server_packages.sii ]; then
              echo "ERROR: server_packages.sii not found!"
              exit 1
            fi
            
            # Start the server
            cd /home/ats-server
            if [ -f ./start_ats_server.sh ]; then
              nohup ./start_ats_server.sh > logs/server.log 2>&1 &
              echo "ATS server started with custom script!"
            else
              # Fallback to direct command
              export LD_LIBRARY_PATH=/home/ats-server/linux64:$LD_LIBRARY_PATH
              nohup ./bin/linux_x64/amtrucks_server -server /home/ats-server/server_packages.sii -server_cfg /home/ats-server/server_config.sii -homedir /home/ats-server -nosingle > logs/server.log 2>&1 &
              echo "ATS server started with direct command!"
            fi
            
            echo "Server PID: $!"
            echo "Check logs at: /home/ats-server/logs/server.log"

