name: üöÄ Deploy ATS Game Server

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        type: choice
        options:
          - 'full-deploy'
          - 'update-only'
          - 'restart-only'
          - 'health-check'
        default: 'update-only'
      
      create_new_server:
        description: 'Create new server'
        required: false
        type: boolean
        default: false

jobs:
  deploy-ats:
    # üëá This calls your standardized actions repository
    uses: nuniesmith/actions/.github/workflows/deploy-service.yml@main
    with:
      service_name: ats
      deployment_mode: ${{ github.event.inputs.deployment_mode || 'update-only' }}
      create_new_server: ${{ github.event.inputs.create_new_server || false }}
      server_type: g6-standard-2  # 4GB RAM for game server
      target_region: ca-central
      domain_suffix: 7gram.xyz
      enable_monitoring: true
      enable_backups: true
    secrets:
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      SERVICE_ROOT_PASSWORD: ${{ secrets.ATS_ROOT_PASSWORD }}
      JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
      ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      TAILSCALE_OAUTH_CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
      TAILSCALE_OAUTH_SECRET: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NETDATA_CLAIM_TOKEN: ${{ secrets.NETDATA_CLAIM_TOKEN }}
      NETDATA_CLAIM_ROOM: ${{ secrets.NETDATA_CLAIM_ROOM }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # ATS-specific post-deployment
  ats-post-deploy:
    name: üéÆ ATS Game Server Setup
    runs-on: ubuntu-latest
    needs: deploy-ats
    if: success()
    
    steps:
      - name: üì• Checkout ATS Repository
        uses: actions/checkout@v4
      
      - name: üîó Setup Tailscale for Game Server
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: üéÆ Configure Game Server
        run: |
          echo "üéÆ Configuring ATS game server..."
          
          # Upload server configurations
          scp config/server_config.sii ats_user@ats.7gram.xyz:/home/ats_user/ats/config/
          
          # Restart game server if needed
          ssh ats_user@ats.7gram.xyz "cd /home/ats_user/ats && docker-compose restart ats-server"
          
      - name: üß™ Test Game Server
        run: |
          echo "üß™ Testing ATS game server..."
          
          # Test web interface
          curl -f https://ats.7gram.xyz/api/health || echo "‚ùå ATS web interface not responding"
          
          # Test game server port (if accessible)
          timeout 5 bash -c "</dev/tcp/ats.7gram.xyz/27015" && echo "‚úÖ Game server port accessible" || echo "‚ö†Ô∏è Game server port not accessible (may be normal)"
