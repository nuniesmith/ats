# Example for ATS Repository
# File: .github/workflows/deploy.yml in your ATS repo

name: üöÄ Manage ATS Game Server

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'deploy'
          - 'destroy'
          - 'health-check'
          - 'restart'
        default: 'deploy'
      
      deployment_mode:
        description: 'Deployment mode'
        required: false
        type: choice
        options:
          - 'full-deploy'
          - 'update-only'
          - 'restart-only'
          - 'code-only'
        default: 'update-only'
      
      # üéØ Your New Options
      skip_tests:
        description: 'Skip running code tests'
        required: false
        type: boolean
        default: false
      
      skip_docker_build:
        description: 'Skip building Docker images'
        required: false
        type: boolean
        default: false
      
      build_docker_on_changes:
        description: 'Only build Docker if code/Dockerfile changed'
        required: false
        type: boolean
        default: true
      
      overwrite_server:
        description: 'Destroy and recreate Linode server'
        required: false
        type: boolean
        default: true
      
      # Destroy Options (for destroy action)
      destroy_scope:
        description: 'What to destroy (for destroy action)'
        required: false
        type: choice
        options:
          - 'service-only'
          - 'full-server'
          - 'reset-service'
        default: 'service-only'
      
      confirm_destruction:
        description: 'Type "DESTROY" to confirm destruction'
        required: false
        type: string

jobs:
  manage-ats:
    # üëá This calls your unified actions repository
    uses: nuniesmith/actions/.github/workflows/deploy.yml@main
    with:
      service_name: ats
      action_type: ${{ github.event.inputs.action_type || 'deploy' }}
      deployment_mode: ${{ github.event.inputs.deployment_mode || 'update-only' }}
      skip_tests: ${{ github.event.inputs.skip_tests || false }}
      skip_docker_build: ${{ github.event.inputs.skip_docker_build || false }}
      build_docker_on_changes: ${{ github.event.inputs.build_docker_on_changes || true }}
      overwrite_server: ${{ github.event.inputs.overwrite_server || true }}
      destroy_scope: ${{ github.event.inputs.destroy_scope || 'service-only' }}
      confirm_destruction: ${{ github.event.inputs.confirm_destruction || '' }}
      server_type: g6-standard-2  # 4GB RAM for game server
      target_region: ca-central
      domain_suffix: 7gram.xyz
      enable_monitoring: true
      enable_backups: false
    secrets:
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      SERVICE_ROOT_PASSWORD: ${{ secrets.ATS_ROOT_PASSWORD }}
      JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
      ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      NETDATA_CLAIM_TOKEN: ${{ secrets.NETDATA_CLAIM_TOKEN }}
      NETDATA_CLAIM_ROOM: ${{ secrets.NETDATA_CLAIM_ROOM }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # ATS-specific post-deployment
  ats-post-deploy:
    name: üéÆ ATS Game Server Setup
    runs-on: ubuntu-latest
    needs: manage-ats
    if: success() && (github.event.inputs.action_type == 'deploy' || github.event.inputs.action_type == '')
    
    steps:
      - name: üì• Checkout ATS Repository
        uses: actions/checkout@v4

      - name: üåê Update Cloudflare DNS Records
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        if: env.CLOUDFLARE_API_TOKEN != '' && env.CLOUDFLARE_ZONE_ID != ''
        run: |
          echo "üåê Updating Cloudflare DNS records for ATS server..."
          
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq >/dev/null 2>&1
          
          # Get the Tailscale IP from the infrastructure job output
          TAILSCALE_IP="${{ needs.manage-ats.outputs.tailscale_ip }}"
          
          if [[ -z "$TAILSCALE_IP" || "$TAILSCALE_IP" == "unknown" || "$TAILSCALE_IP" == "pending" ]]; then
            echo "‚ö†Ô∏è No valid Tailscale IP available: '$TAILSCALE_IP'"
            echo "Skipping DNS update"
            exit 0
          fi
          
          echo "üîó Using Tailscale IP: $TAILSCALE_IP"
          
          # Update A record for ats.7gram.xyz
          echo "üìù Updating A record for ats.7gram.xyz..."
          
          # Get existing record ID first
          RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=A&name=ats.7gram.xyz" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")
          
          if ! echo "$RECORD_RESPONSE" | jq . >/dev/null 2>&1; then
            echo "‚ùå Failed to parse Cloudflare API response"
            echo "Response: $RECORD_RESPONSE"
            exit 1
          fi
          
          RECORD_ID=$(echo "$RECORD_RESPONSE" | jq -r '.result[0].id // empty')
          
          if [[ -n "$RECORD_ID" && "$RECORD_ID" != "null" ]]; then
            echo "üìù Updating existing A record (ID: $RECORD_ID)..."
            UPDATE_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"A\",
                \"name\": \"ats\",
                \"content\": \"$TAILSCALE_IP\",
                \"ttl\": 300,
                \"comment\": \"ATS Game Server - Updated by GitHub Actions\"
              }")
            
            SUCCESS=$(echo "$UPDATE_RESPONSE" | jq -r '.success // false')
            if [[ "$SUCCESS" == "true" ]]; then
              echo "‚úÖ A record updated successfully"
            else
              echo "‚ùå Failed to update A record"
              echo "Response: $UPDATE_RESPONSE"
            fi
          else
            echo "üìù Creating new A record..."
            CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"A\",
                \"name\": \"ats\",
                \"content\": \"$TAILSCALE_IP\",
                \"ttl\": 300,
                \"comment\": \"ATS Game Server - Created by GitHub Actions\"
              }")
            
            SUCCESS=$(echo "$CREATE_RESPONSE" | jq -r '.success // false')
            if [[ "$SUCCESS" == "true" ]]; then
              echo "‚úÖ A record created successfully"
            else
              echo "‚ùå Failed to create A record"
              echo "Response: $CREATE_RESPONSE"
            fi
          fi
          
          echo "‚úÖ DNS update completed - ats.7gram.xyz now points to $TAILSCALE_IP"
          echo "‚è≥ DNS propagation may take a few minutes..."

      - name: üîó Setup Tailscale for Post-Deploy Access
        env:
          TAILSCALE_OAUTH_CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          TAILSCALE_OAUTH_SECRET: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        if: env.TAILSCALE_OAUTH_CLIENT_ID != '' && env.TAILSCALE_OAUTH_SECRET != ''
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        continue-on-error: true

      - name: üéÆ Configure Game Server
        env:
          SSHPASS: ${{ secrets.ACTIONS_USER_PASSWORD }}
        run: |
          echo "üéÆ Configuring ATS game server..."
          
          # Install sshpass for password authentication
          sudo apt-get update && sudo apt-get install -y sshpass >/dev/null 2>&1
          
          # Get the server IP information
          TAILSCALE_IP="${{ needs.manage-ats.outputs.tailscale_ip }}"
          echo "üîó Server Tailscale IP: $TAILSCALE_IP"
          
          # Try to determine server connection method
          echo "üîç Determining server connection method..."
          
          # Method 1: Try Tailscale hostname first (most reliable)
          if timeout 10 sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ats_user@ats "echo 'Connected via Tailscale hostname'" 2>/dev/null; then
            SERVER_HOST="ats"
            echo "‚úÖ Using Tailscale hostname: $SERVER_HOST"
          # Method 2: Try Tailscale IP directly
          elif [[ -n "$TAILSCALE_IP" && "$TAILSCALE_IP" != "unknown" && "$TAILSCALE_IP" != "pending" ]] && timeout 10 sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ats_user@$TAILSCALE_IP "echo 'Connected via Tailscale IP'" 2>/dev/null; then
            SERVER_HOST="$TAILSCALE_IP"
            echo "‚úÖ Using Tailscale IP: $SERVER_HOST"
          # Method 3: Try public domain (after DNS update)
          elif timeout 10 sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ats_user@ats.7gram.xyz "echo 'Connected via public domain'" 2>/dev/null; then
            SERVER_HOST="ats.7gram.xyz"
            echo "‚úÖ Using public domain: $SERVER_HOST"
          else
            echo "‚ùå Could not connect to ATS server via any method"
            echo "üîç Tried:"
            echo "  - Tailscale hostname: ats"
            echo "  - Tailscale IP: $TAILSCALE_IP"
            echo "  - Public domain: ats.7gram.xyz"
            echo "‚ö†Ô∏è Skipping game server configuration"
            exit 0
          fi
          
          echo "üîÑ Waiting for services to be ready..."
          sleep 30
          
          # Create service directory structure if it doesn't exist
          echo "üìÅ Ensuring service directory structure exists..."
          sshpass -e ssh -o StrictHostKeyChecking=no ats_user@$SERVER_HOST "
            mkdir -p /home/ats_user/ats/config
            mkdir -p /home/ats_user/ats/data
            mkdir -p /home/ats_user/ats/logs
          " || echo "‚ö†Ô∏è Failed to create some directories"
          
          # Upload server configurations if they exist
          if [[ -f "config/server_config.sii" ]]; then
            echo "üìÅ Uploading server configuration..."
            sshpass -e scp -o StrictHostKeyChecking=no config/server_config.sii ats_user@$SERVER_HOST:/home/ats_user/ats/config/ || {
              echo "‚ö†Ô∏è Failed to upload server config"
            }
          else
            echo "‚ÑπÔ∏è No server_config.sii found to upload"
          fi
          
          # Upload additional configs if they exist
          if [[ -d "config/" ]]; then
            echo "üìÅ Uploading additional configurations..."
            sshpass -e scp -r -o StrictHostKeyChecking=no config/* ats_user@$SERVER_HOST:/home/ats_user/ats/config/ || {
              echo "‚ö†Ô∏è Failed to upload some configs"
            }
          fi
          
          # Upload docker-compose or other deployment files
          for file in docker-compose.yml docker-compose.yaml start.sh deploy.sh; do
            if [[ -f "$file" ]]; then
              echo "üìÅ Uploading $file..."
              sshpass -e scp -o StrictHostKeyChecking=no "$file" ats_user@$SERVER_HOST:/home/ats_user/ats/ || {
                echo "‚ö†Ô∏è Failed to upload $file"
              }
            fi
          done
          
          # Check if docker-compose is ready and restart services
          echo "üê≥ Checking and restarting game server..."
          sshpass -e ssh -o StrictHostKeyChecking=no ats_user@$SERVER_HOST "
            cd /home/ats_user/ats || exit 1
            
            echo 'Current directory contents:'
            ls -la
            
            if [[ -f docker-compose.yml ]]; then
              echo 'Docker compose file found, restarting services...'
              docker-compose down || true
              docker-compose pull || echo 'Failed to pull some images'
              docker-compose up -d || echo 'Failed to start some services'
              
              echo 'Service status:'
              docker-compose ps
            else
              echo 'No docker-compose.yml found, checking for other start methods...'
              if [[ -f start.sh ]]; then
                echo 'Found start.sh, running it...'
                chmod +x start.sh && ./start.sh
              elif [[ -f deploy.sh ]]; then
                echo 'Found deploy.sh, running it...'
                chmod +x deploy.sh && ./deploy.sh
              else
                echo 'No start script found - manual setup may be required'
              fi
            fi
          " || {
            echo "‚ö†Ô∏è Failed to restart game server services"
          }

      - name: üß™ Test Game Server
        run: |
          echo "üß™ Testing ATS game server..."
          
          # Wait a bit for services to start and DNS to propagate
          echo "‚è≥ Waiting for services to start and DNS to propagate..."
          sleep 30
          
          TAILSCALE_IP="${{ needs.manage-ats.outputs.tailscale_ip }}"
          
          # Test web interface via multiple methods
          echo "üåê Testing web interface..."
          
          # Method 1: Tailscale hostname
          if timeout 10 curl -f http://ats:8080/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via Tailscale hostname"
          elif timeout 10 curl -f http://ats/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via Tailscale hostname (port 80)"
          # Method 2: Tailscale IP
          elif [[ -n "$TAILSCALE_IP" && "$TAILSCALE_IP" != "unknown" ]] && timeout 10 curl -f http://$TAILSCALE_IP:8080/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via Tailscale IP"
          elif [[ -n "$TAILSCALE_IP" && "$TAILSCALE_IP" != "unknown" ]] && timeout 10 curl -f http://$TAILSCALE_IP/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via Tailscale IP (port 80)"
          # Method 3: Public domain
          elif timeout 10 curl -f https://ats.7gram.xyz/api/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via public domain (HTTPS)"
          elif timeout 10 curl -f http://ats.7gram.xyz/health 2>/dev/null; then
            echo "‚úÖ ATS web interface responding via public domain (HTTP)"
          else
            echo "‚ö†Ô∏è ATS web interface not responding via any method (may still be starting up)"
          fi
          
          # Test game server port if accessible
          echo "üéÆ Testing game server port..."
          
          if timeout 5 bash -c "</dev/tcp/ats/27015" 2>/dev/null; then
            echo "‚úÖ Game server port accessible via Tailscale hostname"
          elif [[ -n "$TAILSCALE_IP" && "$TAILSCALE_IP" != "unknown" ]] && timeout 5 bash -c "</dev/tcp/$TAILSCALE_IP/27015" 2>/dev/null; then
            echo "‚úÖ Game server port accessible via Tailscale IP"
          elif timeout 5 bash -c "</dev/tcp/ats.7gram.xyz/27015" 2>/dev/null; then
            echo "‚úÖ Game server port accessible via public domain"
          else
            echo "‚ÑπÔ∏è Game server port not accessible externally (may be behind firewall or still starting)"
            echo "   This is normal if the game server only accepts connections from Tailscale network"
          fi
          
          echo "üéÆ ATS game server setup complete!"
          echo "üìä Access URLs:"
          echo "  - Tailscale: http://ats:8080 or http://$TAILSCALE_IP:8080"
          echo "  - Public: https://ats.7gram.xyz (after DNS propagation)"
